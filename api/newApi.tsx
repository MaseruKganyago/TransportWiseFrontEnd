/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface LoginViewModel {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface RegisterViewModel {
  name: string;
  surname: string;
  mobilePhone?: string | null;
  email: string;
  password: string;
  confirmPassword?: string | null;
}

export interface ApplicationUserViewModel {
  id?: string | null;
  email?: { [key: string]: any } | null;
  name?: string | null;
  surname?: string | null;
  mobilePhone?: string | null;
  photo?: string | null;
}

export interface ChangePasswordViewModel {
  oldPassword: string;
  newPassword: string;
  confirmPassword?: string | null;
}

export interface ForgotPasswordViewModel {
  email: string;
}

export interface ResetPasswordViewModel {
  email: string;
  password: string;
  confirmPassword?: string | null;
  token?: string | null;
}

export interface Articles {
  id?: string;
  title?: string | null;
  content?: string | null;
  userName?: string | null;
  description?: string | null;
}

export interface Author {
  id?: string;
  name?: string | null;
  surname?: string | null;
  jobTitle?: string | null;
  driverExperience?: string | null;
}

export interface FuelWise {
  id?: string;
  title?: string | null;
  body?: string | null;
  authorId?: string;
}

export interface TipsForEveryOne {
  id?: string;
  content?: string | null;
  userId?: string;
}

export interface User {
  id?: string;
  email?: string | null;
  name?: string | null;
  surname?: string | null;
  mobilePhone?: string | null;
  photo?: string | null;
}

export type AccountLoginProps = Omit<MutateProps<void, unknown, void, LoginViewModel>, 'path' | 'verb'>;

export const AccountLogin = (props: AccountLoginProps) => (
  <Mutate<void, unknown, void, LoginViewModel> verb="POST" path={`/api/Account/Login`} {...props} />
);

export type UseAccountLoginProps = Omit<UseMutateProps<void, void, LoginViewModel>, 'path' | 'verb'>;

export const useAccountLogin = (props: UseAccountLoginProps) =>
  useMutate<void, unknown, void, LoginViewModel>('POST', `/api/Account/Login`, props);

export type AccountLogoutProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

export const AccountLogout = (props: AccountLogoutProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Account/Logout`} {...props} />
);

export type UseAccountLogoutProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

export const useAccountLogout = (props: UseAccountLogoutProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Account/Logout`, props);

export type AccountRegisterProps = Omit<MutateProps<void, unknown, void, RegisterViewModel>, 'path' | 'verb'>;

export const AccountRegister = (props: AccountRegisterProps) => (
  <Mutate<void, unknown, void, RegisterViewModel> verb="POST" path={`/api/Account/Register`} {...props} />
);

export type UseAccountRegisterProps = Omit<UseMutateProps<void, void, RegisterViewModel>, 'path' | 'verb'>;

export const useAccountRegister = (props: UseAccountRegisterProps) =>
  useMutate<void, unknown, void, RegisterViewModel>('POST', `/api/Account/Register`, props);

export type AccountEditUserProps = Omit<MutateProps<void, unknown, void, ApplicationUserViewModel>, 'path' | 'verb'>;

export const AccountEditUser = (props: AccountEditUserProps) => (
  <Mutate<void, unknown, void, ApplicationUserViewModel> verb="PUT" path={`/api/Account/UpdateUser`} {...props} />
);

export type UseAccountEditUserProps = Omit<UseMutateProps<void, void, ApplicationUserViewModel>, 'path' | 'verb'>;

export const useAccountEditUser = (props: UseAccountEditUserProps) =>
  useMutate<void, unknown, void, ApplicationUserViewModel>('PUT', `/api/Account/UpdateUser`, props);

export type AccountChangePasswordProps = Omit<
  MutateProps<void, unknown, void, ChangePasswordViewModel>,
  'path' | 'verb'
>;

export const AccountChangePassword = (props: AccountChangePasswordProps) => (
  <Mutate<void, unknown, void, ChangePasswordViewModel> verb="PUT" path={`/api/Account/Password`} {...props} />
);

export type UseAccountChangePasswordProps = Omit<UseMutateProps<void, void, ChangePasswordViewModel>, 'path' | 'verb'>;

export const useAccountChangePassword = (props: UseAccountChangePasswordProps) =>
  useMutate<void, unknown, void, ChangePasswordViewModel>('PUT', `/api/Account/Password`, props);

export type AccountIsAuthenticatedProps = Omit<GetProps<void, unknown, void>, 'path'>;

export const AccountIsAuthenticated = (props: AccountIsAuthenticatedProps) => (
  <Get<void, unknown, void> path={`/api/Account/Authenticated`} {...props} />
);

export type UseAccountIsAuthenticatedProps = Omit<UseGetProps<void, void>, 'path'>;

export const useAccountIsAuthenticated = (props: UseAccountIsAuthenticatedProps) =>
  useGet<void, unknown, void>(`/api/Account/Authenticated`, props);

export type AccountForgotPasswordProps = Omit<
  MutateProps<void, unknown, void, ForgotPasswordViewModel>,
  'path' | 'verb'
>;

export const AccountForgotPassword = (props: AccountForgotPasswordProps) => (
  <Mutate<void, unknown, void, ForgotPasswordViewModel> verb="POST" path={`/api/Account/ForgotPassword`} {...props} />
);

export type UseAccountForgotPasswordProps = Omit<UseMutateProps<void, void, ForgotPasswordViewModel>, 'path' | 'verb'>;

export const useAccountForgotPassword = (props: UseAccountForgotPasswordProps) =>
  useMutate<void, unknown, void, ForgotPasswordViewModel>('POST', `/api/Account/ForgotPassword`, props);

export type AccountResetPasswordProps = Omit<MutateProps<void, unknown, void, ResetPasswordViewModel>, 'path' | 'verb'>;

export const AccountResetPassword = (props: AccountResetPasswordProps) => (
  <Mutate<void, unknown, void, ResetPasswordViewModel> verb="POST" path={`/api/Account/ResetPassword`} {...props} />
);

export type UseAccountResetPasswordProps = Omit<UseMutateProps<void, void, ResetPasswordViewModel>, 'path' | 'verb'>;

export const useAccountResetPassword = (props: UseAccountResetPasswordProps) =>
  useMutate<void, unknown, void, ResetPasswordViewModel>('POST', `/api/Account/ResetPassword`, props);

export type ArticlesGetArticlesAllProps = Omit<GetProps<Articles[], unknown, void>, 'path'>;

export const ArticlesGetArticlesAll = (props: ArticlesGetArticlesAllProps) => (
  <Get<Articles[], unknown, void> path={`/api/Articles`} {...props} />
);

export type UseArticlesGetArticlesAllProps = Omit<UseGetProps<Articles[], void>, 'path'>;

export const useArticlesGetArticlesAll = (props: UseArticlesGetArticlesAllProps) =>
  useGet<Articles[], unknown, void>(`/api/Articles`, props);

export type ArticlesPostArticlesProps = Omit<MutateProps<void, unknown, void, Articles>, 'path' | 'verb'>;

export const ArticlesPostArticles = (props: ArticlesPostArticlesProps) => (
  <Mutate<void, unknown, void, Articles> verb="POST" path={`/api/Articles`} {...props} />
);

export type UseArticlesPostArticlesProps = Omit<UseMutateProps<void, void, Articles>, 'path' | 'verb'>;

export const useArticlesPostArticles = (props: UseArticlesPostArticlesProps) =>
  useMutate<void, unknown, void, Articles>('POST', `/api/Articles`, props);

export type ArticlesGetArticlesProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const ArticlesGetArticles = ({ id, ...props }: ArticlesGetArticlesProps) => (
  <Get<void, unknown, void> path={`/api/Articles/${id}`} {...props} />
);

export type UseArticlesGetArticlesProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useArticlesGetArticles = ({ id, ...props }: UseArticlesGetArticlesProps) =>
  useGet<void, unknown, void>(`/api/Articles/${id}`, props);

export type ArticlesPutArticlesProps = Omit<MutateProps<void, unknown, void, Articles>, 'path' | 'verb'> & {
  id: string;
};

export const ArticlesPutArticles = ({ id, ...props }: ArticlesPutArticlesProps) => (
  <Mutate<void, unknown, void, Articles> verb="PUT" path={`/api/Articles/${id}`} {...props} />
);

export type UseArticlesPutArticlesProps = Omit<UseMutateProps<void, void, Articles>, 'path' | 'verb'> & { id: string };

export const useArticlesPutArticles = ({ id, ...props }: UseArticlesPutArticlesProps) =>
  useMutate<void, unknown, void, Articles>('PUT', `/api/Articles/${id}`, props);

export type ArticlesDeleteArticlesProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const ArticlesDeleteArticles = (props: ArticlesDeleteArticlesProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Articles`} {...props} />
);

export type UseArticlesDeleteArticlesProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useArticlesDeleteArticles = (props: UseArticlesDeleteArticlesProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Articles`, props);

export type AuthorsGetAuthorAllProps = Omit<GetProps<Author[], unknown, void>, 'path'>;

export const AuthorsGetAuthorAll = (props: AuthorsGetAuthorAllProps) => (
  <Get<Author[], unknown, void> path={`/api/Authors`} {...props} />
);

export type UseAuthorsGetAuthorAllProps = Omit<UseGetProps<Author[], void>, 'path'>;

export const useAuthorsGetAuthorAll = (props: UseAuthorsGetAuthorAllProps) =>
  useGet<Author[], unknown, void>(`/api/Authors`, props);

export type AuthorsPostAuthorProps = Omit<MutateProps<void, unknown, void, Author>, 'path' | 'verb'>;

export const AuthorsPostAuthor = (props: AuthorsPostAuthorProps) => (
  <Mutate<void, unknown, void, Author> verb="POST" path={`/api/Authors`} {...props} />
);

export type UseAuthorsPostAuthorProps = Omit<UseMutateProps<void, void, Author>, 'path' | 'verb'>;

export const useAuthorsPostAuthor = (props: UseAuthorsPostAuthorProps) =>
  useMutate<void, unknown, void, Author>('POST', `/api/Authors`, props);

export type AuthorsGetAuthorProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const AuthorsGetAuthor = ({ id, ...props }: AuthorsGetAuthorProps) => (
  <Get<void, unknown, void> path={`/api/Authors/${id}`} {...props} />
);

export type UseAuthorsGetAuthorProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useAuthorsGetAuthor = ({ id, ...props }: UseAuthorsGetAuthorProps) =>
  useGet<void, unknown, void>(`/api/Authors/${id}`, props);

export type AuthorsPutAuthorProps = Omit<MutateProps<void, unknown, void, Author>, 'path' | 'verb'> & { id: string };

export const AuthorsPutAuthor = ({ id, ...props }: AuthorsPutAuthorProps) => (
  <Mutate<void, unknown, void, Author> verb="PUT" path={`/api/Authors/${id}`} {...props} />
);

export type UseAuthorsPutAuthorProps = Omit<UseMutateProps<void, void, Author>, 'path' | 'verb'> & { id: string };

export const useAuthorsPutAuthor = ({ id, ...props }: UseAuthorsPutAuthorProps) =>
  useMutate<void, unknown, void, Author>('PUT', `/api/Authors/${id}`, props);

export type AuthorsDeleteAuthorProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const AuthorsDeleteAuthor = (props: AuthorsDeleteAuthorProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Authors`} {...props} />
);

export type UseAuthorsDeleteAuthorProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useAuthorsDeleteAuthor = (props: UseAuthorsDeleteAuthorProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Authors`, props);

export type FuelWisesGetFuelWiseAllProps = Omit<GetProps<FuelWise[], unknown, void>, 'path'>;

export const FuelWisesGetFuelWiseAll = (props: FuelWisesGetFuelWiseAllProps) => (
  <Get<FuelWise[], unknown, void> path={`/api/FuelWises`} {...props} />
);

export type UseFuelWisesGetFuelWiseAllProps = Omit<UseGetProps<FuelWise[], void>, 'path'>;

export const useFuelWisesGetFuelWiseAll = (props: UseFuelWisesGetFuelWiseAllProps) =>
  useGet<FuelWise[], unknown, void>(`/api/FuelWises`, props);

export type FuelWisesPostFuelWiseProps = Omit<MutateProps<void, unknown, void, FuelWise>, 'path' | 'verb'>;

export const FuelWisesPostFuelWise = (props: FuelWisesPostFuelWiseProps) => (
  <Mutate<void, unknown, void, FuelWise> verb="POST" path={`/api/FuelWises`} {...props} />
);

export type UseFuelWisesPostFuelWiseProps = Omit<UseMutateProps<void, void, FuelWise>, 'path' | 'verb'>;

export const useFuelWisesPostFuelWise = (props: UseFuelWisesPostFuelWiseProps) =>
  useMutate<void, unknown, void, FuelWise>('POST', `/api/FuelWises`, props);

export type FuelWisesGetFuelWiseProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const FuelWisesGetFuelWise = ({ id, ...props }: FuelWisesGetFuelWiseProps) => (
  <Get<void, unknown, void> path={`/api/FuelWises/${id}`} {...props} />
);

export type UseFuelWisesGetFuelWiseProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useFuelWisesGetFuelWise = ({ id, ...props }: UseFuelWisesGetFuelWiseProps) =>
  useGet<void, unknown, void>(`/api/FuelWises/${id}`, props);

export type FuelWisesPutFuelWiseProps = Omit<MutateProps<void, unknown, void, FuelWise>, 'path' | 'verb'> & {
  id: string;
};

export const FuelWisesPutFuelWise = ({ id, ...props }: FuelWisesPutFuelWiseProps) => (
  <Mutate<void, unknown, void, FuelWise> verb="PUT" path={`/api/FuelWises/${id}`} {...props} />
);

export type UseFuelWisesPutFuelWiseProps = Omit<UseMutateProps<void, void, FuelWise>, 'path' | 'verb'> & { id: string };

export const useFuelWisesPutFuelWise = ({ id, ...props }: UseFuelWisesPutFuelWiseProps) =>
  useMutate<void, unknown, void, FuelWise>('PUT', `/api/FuelWises/${id}`, props);

export type FuelWisesDeleteFuelWiseProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const FuelWisesDeleteFuelWise = (props: FuelWisesDeleteFuelWiseProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/FuelWises`} {...props} />
);

export type UseFuelWisesDeleteFuelWiseProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useFuelWisesDeleteFuelWise = (props: UseFuelWisesDeleteFuelWiseProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/FuelWises`, props);

export type ImagesSetProfileProps = Omit<MutateProps<void, unknown, void, void>, 'path' | 'verb'>;

export const ImagesSetProfile = (props: ImagesSetProfileProps) => (
  <Mutate<void, unknown, void, void> verb="POST" path={`/api/Images/Image`} {...props} />
);

export type UseImagesSetProfileProps = Omit<UseMutateProps<void, void, void>, 'path' | 'verb'>;

export const useImagesSetProfile = (props: UseImagesSetProfileProps) =>
  useMutate<void, unknown, void, void>('POST', `/api/Images/Image`, props);

export type ImagesGetProfileProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const ImagesGetProfile = ({ id, ...props }: ImagesGetProfileProps) => (
  <Get<void, unknown, void> path={`/api/Images/${id}`} {...props} />
);

export type UseImagesGetProfileProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useImagesGetProfile = ({ id, ...props }: UseImagesGetProfileProps) =>
  useGet<void, unknown, void>(`/api/Images/${id}`, props);

export type TipsForEveryOnesGetTipsForEveryOneAllProps = Omit<GetProps<TipsForEveryOne[], unknown, void>, 'path'>;

export const TipsForEveryOnesGetTipsForEveryOneAll = (props: TipsForEveryOnesGetTipsForEveryOneAllProps) => (
  <Get<TipsForEveryOne[], unknown, void> path={`/api/TipsForEveryOnes`} {...props} />
);

export type UseTipsForEveryOnesGetTipsForEveryOneAllProps = Omit<UseGetProps<TipsForEveryOne[], void>, 'path'>;

export const useTipsForEveryOnesGetTipsForEveryOneAll = (props: UseTipsForEveryOnesGetTipsForEveryOneAllProps) =>
  useGet<TipsForEveryOne[], unknown, void>(`/api/TipsForEveryOnes`, props);

export type TipsForEveryOnesPostTipsForEveryOneProps = Omit<
  MutateProps<void, unknown, void, TipsForEveryOne>,
  'path' | 'verb'
>;

export const TipsForEveryOnesPostTipsForEveryOne = (props: TipsForEveryOnesPostTipsForEveryOneProps) => (
  <Mutate<void, unknown, void, TipsForEveryOne> verb="POST" path={`/api/TipsForEveryOnes`} {...props} />
);

export type UseTipsForEveryOnesPostTipsForEveryOneProps = Omit<
  UseMutateProps<void, void, TipsForEveryOne>,
  'path' | 'verb'
>;

export const useTipsForEveryOnesPostTipsForEveryOne = (props: UseTipsForEveryOnesPostTipsForEveryOneProps) =>
  useMutate<void, unknown, void, TipsForEveryOne>('POST', `/api/TipsForEveryOnes`, props);

export type TipsForEveryOnesGetTipsForEveryOneProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const TipsForEveryOnesGetTipsForEveryOne = ({ id, ...props }: TipsForEveryOnesGetTipsForEveryOneProps) => (
  <Get<void, unknown, void> path={`/api/TipsForEveryOnes/${id}`} {...props} />
);

export type UseTipsForEveryOnesGetTipsForEveryOneProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useTipsForEveryOnesGetTipsForEveryOne = ({ id, ...props }: UseTipsForEveryOnesGetTipsForEveryOneProps) =>
  useGet<void, unknown, void>(`/api/TipsForEveryOnes/${id}`, props);

export type TipsForEveryOnesPutTipsForEveryOneProps = Omit<
  MutateProps<void, unknown, void, TipsForEveryOne>,
  'path' | 'verb'
> & { id: string };

export const TipsForEveryOnesPutTipsForEveryOne = ({ id, ...props }: TipsForEveryOnesPutTipsForEveryOneProps) => (
  <Mutate<void, unknown, void, TipsForEveryOne> verb="PUT" path={`/api/TipsForEveryOnes/${id}`} {...props} />
);

export type UseTipsForEveryOnesPutTipsForEveryOneProps = Omit<
  UseMutateProps<void, void, TipsForEveryOne>,
  'path' | 'verb'
> & { id: string };

export const useTipsForEveryOnesPutTipsForEveryOne = ({ id, ...props }: UseTipsForEveryOnesPutTipsForEveryOneProps) =>
  useMutate<void, unknown, void, TipsForEveryOne>('PUT', `/api/TipsForEveryOnes/${id}`, props);

export type TipsForEveryOnesDeleteTipsForEveryOneProps = Omit<
  MutateProps<void, unknown, void, string>,
  'path' | 'verb'
>;

export const TipsForEveryOnesDeleteTipsForEveryOne = (props: TipsForEveryOnesDeleteTipsForEveryOneProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/TipsForEveryOnes`} {...props} />
);

export type UseTipsForEveryOnesDeleteTipsForEveryOneProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useTipsForEveryOnesDeleteTipsForEveryOne = (props: UseTipsForEveryOnesDeleteTipsForEveryOneProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/TipsForEveryOnes`, props);

export type UsersGetUserAllProps = Omit<GetProps<User[], unknown, void>, 'path'>;

export const UsersGetUserAll = (props: UsersGetUserAllProps) => (
  <Get<User[], unknown, void> path={`/api/Users`} {...props} />
);

export type UseUsersGetUserAllProps = Omit<UseGetProps<User[], void>, 'path'>;

export const useUsersGetUserAll = (props: UseUsersGetUserAllProps) =>
  useGet<User[], unknown, void>(`/api/Users`, props);

export type UsersPostUserProps = Omit<MutateProps<void, unknown, void, User>, 'path' | 'verb'>;

export const UsersPostUser = (props: UsersPostUserProps) => (
  <Mutate<void, unknown, void, User> verb="POST" path={`/api/Users`} {...props} />
);

export type UseUsersPostUserProps = Omit<UseMutateProps<void, void, User>, 'path' | 'verb'>;

export const useUsersPostUser = (props: UseUsersPostUserProps) =>
  useMutate<void, unknown, void, User>('POST', `/api/Users`, props);

export type UsersGetUserProps = Omit<GetProps<void, unknown, void>, 'path'> & { id: string };

export const UsersGetUser = ({ id, ...props }: UsersGetUserProps) => (
  <Get<void, unknown, void> path={`/api/Users/${id}`} {...props} />
);

export type UseUsersGetUserProps = Omit<UseGetProps<void, void>, 'path'> & { id: string };

export const useUsersGetUser = ({ id, ...props }: UseUsersGetUserProps) =>
  useGet<void, unknown, void>(`/api/Users/${id}`, props);

export type UsersPutUserProps = Omit<MutateProps<void, unknown, void, User>, 'path' | 'verb'> & { id: string };

export const UsersPutUser = ({ id, ...props }: UsersPutUserProps) => (
  <Mutate<void, unknown, void, User> verb="PUT" path={`/api/Users/${id}`} {...props} />
);

export type UseUsersPutUserProps = Omit<UseMutateProps<void, void, User>, 'path' | 'verb'> & { id: string };

export const useUsersPutUser = ({ id, ...props }: UseUsersPutUserProps) =>
  useMutate<void, unknown, void, User>('PUT', `/api/Users/${id}`, props);

export type UsersDeleteUserProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const UsersDeleteUser = (props: UsersDeleteUserProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Users`} {...props} />
);

export type UseUsersDeleteUserProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useUsersDeleteUser = (props: UseUsersDeleteUserProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Users`, props);

export type ValuesGetAllProps = Omit<GetProps<string[], unknown, void>, 'path'>;

export const ValuesGetAll = (props: ValuesGetAllProps) => (
  <Get<string[], unknown, void> path={`/api/Values`} {...props} />
);

export type UseValuesGetAllProps = Omit<UseGetProps<string[], void>, 'path'>;

export const useValuesGetAll = (props: UseValuesGetAllProps) => useGet<string[], unknown, void>(`/api/Values`, props);

export type ValuesPostProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const ValuesPost = (props: ValuesPostProps) => (
  <Mutate<void, unknown, void, string> verb="POST" path={`/api/Values`} {...props} />
);

export type UseValuesPostProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useValuesPost = (props: UseValuesPostProps) =>
  useMutate<void, unknown, void, string>('POST', `/api/Values`, props);

export type ValuesGetProps = Omit<GetProps<string, unknown, void>, 'path'> & { id: number };

export const ValuesGet = ({ id, ...props }: ValuesGetProps) => (
  <Get<string, unknown, void> path={`/api/Values/${id}`} {...props} />
);

export type UseValuesGetProps = Omit<UseGetProps<string, void>, 'path'> & { id: number };

export const useValuesGet = ({ id, ...props }: UseValuesGetProps) =>
  useGet<string, unknown, void>(`/api/Values/${id}`, props);

export type ValuesPutProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'> & { id: number };

export const ValuesPut = ({ id, ...props }: ValuesPutProps) => (
  <Mutate<void, unknown, void, string> verb="PUT" path={`/api/Values/${id}`} {...props} />
);

export type UseValuesPutProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'> & { id: number };

export const useValuesPut = ({ id, ...props }: UseValuesPutProps) =>
  useMutate<void, unknown, void, string>('PUT', `/api/Values/${id}`, props);

export type ValuesDeleteProps = Omit<MutateProps<void, unknown, void, string>, 'path' | 'verb'>;

export const ValuesDelete = (props: ValuesDeleteProps) => (
  <Mutate<void, unknown, void, string> verb="DELETE" path={`/api/Values`} {...props} />
);

export type UseValuesDeleteProps = Omit<UseMutateProps<void, void, string>, 'path' | 'verb'>;

export const useValuesDelete = (props: UseValuesDeleteProps) =>
  useMutate<void, unknown, void, string>('DELETE', `/api/Values`, props);
